Requerimientos Desafio:
1. Crear una ruta GET /joyas que:
a. Devuelva la estructura HATEOAS de todas las joyas almacenadas en la base
de datos (1.5 puntos)
URL: http://localhost:3000/api/joyas?limits=3&page=2&order_by=stock_ASC

2. Crear una ruta GET /joyas/filtros que reciba los siguientes parámetros en la query
string: (3.5 puntos)
a. precio_max: Filtrar las joyas con un precio mayor al valor recibido
b. precio_min: Filtrar las joyas con un precio menor al valor recibido.
c. categoria: Filtrar las joyas por la categoría
d. metal: Filtrar las joyas por la categoría
URL: http://localhost:3000/api/joyas/filtros?precio_min=15000&precio_max=30000&categoria=aros&metal=plata

3. Implementar middlewares para generar informes o reportes de alguna actividad o
evento específico que ocurra en cada una de las rutas.
(1 puntos) - Funcionando Ok

4. Usar try catch para capturar los posibles errores durante una consulta y la lógica de
cada ruta creada. (1 puntos)
URL: GET http://localhost:3000/api/joyas?order_by=invalid_column

5. Usar las consultas parametrizadas para evitar el SQL Injection en la consulta a la
base de datos relacionada con la ruta GET /joyas/filtros (1 puntos)
URL GET http://localhost:3000/api/joyas/filtros?precio_min=0;DROP TABLE inventario


